// Generated by gencpp from file mtt_msgs/TargetCandidate.msg
// DO NOT EDIT!


#ifndef MTT_MSGS_MESSAGE_TARGETCANDIDATE_H
#define MTT_MSGS_MESSAGE_TARGETCANDIDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int8.h>
#include <geometry_msgs/Point.h>

namespace mtt_msgs
{
template <class ContainerAllocator>
struct TargetCandidate_
{
  typedef TargetCandidate_<ContainerAllocator> Type;

  TargetCandidate_()
    : header()
    , id_1()
    , class_1()
    , position_1()
    , id_2()
    , class_2()
    , position_2()
    , id_3()
    , class_3()
    , position_3()
    , id_4()
    , class_4()
    , position_4()
    , id_5()
    , class_5()
    , position_5()  {
    }
  TargetCandidate_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id_1(_alloc)
    , class_1(_alloc)
    , position_1(_alloc)
    , id_2(_alloc)
    , class_2(_alloc)
    , position_2(_alloc)
    , id_3(_alloc)
    , class_3(_alloc)
    , position_3(_alloc)
    , id_4(_alloc)
    , class_4(_alloc)
    , position_4(_alloc)
    , id_5(_alloc)
    , class_5(_alloc)
    , position_5(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _id_1_type;
  _id_1_type id_1;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _class_1_type;
  _class_1_type class_1;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_1_type;
  _position_1_type position_1;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _id_2_type;
  _id_2_type id_2;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _class_2_type;
  _class_2_type class_2;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_2_type;
  _position_2_type position_2;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _id_3_type;
  _id_3_type id_3;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _class_3_type;
  _class_3_type class_3;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_3_type;
  _position_3_type position_3;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _id_4_type;
  _id_4_type id_4;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _class_4_type;
  _class_4_type class_4;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_4_type;
  _position_4_type position_4;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _id_5_type;
  _id_5_type id_5;

   typedef  ::std_msgs::Int8_<ContainerAllocator>  _class_5_type;
  _class_5_type class_5;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_5_type;
  _position_5_type position_5;





  typedef boost::shared_ptr< ::mtt_msgs::TargetCandidate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mtt_msgs::TargetCandidate_<ContainerAllocator> const> ConstPtr;

}; // struct TargetCandidate_

typedef ::mtt_msgs::TargetCandidate_<std::allocator<void> > TargetCandidate;

typedef boost::shared_ptr< ::mtt_msgs::TargetCandidate > TargetCandidatePtr;
typedef boost::shared_ptr< ::mtt_msgs::TargetCandidate const> TargetCandidateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mtt_msgs::TargetCandidate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mtt_msgs::TargetCandidate_<ContainerAllocator1> & lhs, const ::mtt_msgs::TargetCandidate_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id_1 == rhs.id_1 &&
    lhs.class_1 == rhs.class_1 &&
    lhs.position_1 == rhs.position_1 &&
    lhs.id_2 == rhs.id_2 &&
    lhs.class_2 == rhs.class_2 &&
    lhs.position_2 == rhs.position_2 &&
    lhs.id_3 == rhs.id_3 &&
    lhs.class_3 == rhs.class_3 &&
    lhs.position_3 == rhs.position_3 &&
    lhs.id_4 == rhs.id_4 &&
    lhs.class_4 == rhs.class_4 &&
    lhs.position_4 == rhs.position_4 &&
    lhs.id_5 == rhs.id_5 &&
    lhs.class_5 == rhs.class_5 &&
    lhs.position_5 == rhs.position_5;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mtt_msgs::TargetCandidate_<ContainerAllocator1> & lhs, const ::mtt_msgs::TargetCandidate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mtt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mtt_msgs::TargetCandidate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtt_msgs::TargetCandidate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtt_msgs::TargetCandidate_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc377ddc3099b4c637aba5f3b76231f6";
  }

  static const char* value(const ::mtt_msgs::TargetCandidate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc377ddc3099b4c6ULL;
  static const uint64_t static_value2 = 0x37aba5f3b76231f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mtt_msgs/TargetCandidate";
  }

  static const char* value(const ::mtt_msgs::TargetCandidate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"std_msgs/Int32 id_1\n"
"std_msgs/Int8 class_1\n"
"geometry_msgs/Point position_1\n"
"std_msgs/Int32 id_2\n"
"std_msgs/Int8 class_2\n"
"geometry_msgs/Point position_2\n"
"std_msgs/Int32 id_3\n"
"std_msgs/Int8 class_3\n"
"geometry_msgs/Point position_3\n"
"std_msgs/Int32 id_4\n"
"std_msgs/Int8 class_4\n"
"geometry_msgs/Point position_4\n"
"std_msgs/Int32 id_5\n"
"std_msgs/Int8 class_5\n"
"geometry_msgs/Point position_5\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mtt_msgs::TargetCandidate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id_1);
      stream.next(m.class_1);
      stream.next(m.position_1);
      stream.next(m.id_2);
      stream.next(m.class_2);
      stream.next(m.position_2);
      stream.next(m.id_3);
      stream.next(m.class_3);
      stream.next(m.position_3);
      stream.next(m.id_4);
      stream.next(m.class_4);
      stream.next(m.position_4);
      stream.next(m.id_5);
      stream.next(m.class_5);
      stream.next(m.position_5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetCandidate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mtt_msgs::TargetCandidate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mtt_msgs::TargetCandidate_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id_1: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.id_1);
    s << indent << "class_1: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.class_1);
    s << indent << "position_1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position_1);
    s << indent << "id_2: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.id_2);
    s << indent << "class_2: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.class_2);
    s << indent << "position_2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position_2);
    s << indent << "id_3: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.id_3);
    s << indent << "class_3: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.class_3);
    s << indent << "position_3: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position_3);
    s << indent << "id_4: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.id_4);
    s << indent << "class_4: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.class_4);
    s << indent << "position_4: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position_4);
    s << indent << "id_5: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.id_5);
    s << indent << "class_5: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.class_5);
    s << indent << "position_5: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position_5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MTT_MSGS_MESSAGE_TARGETCANDIDATE_H
