# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mtt_msgs/TargetCandidate.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class TargetCandidate(genpy.Message):
  _md5sum = "fc377ddc3099b4c637aba5f3b76231f6"
  _type = "mtt_msgs/TargetCandidate"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
std_msgs/Int32 id_1
std_msgs/Int8 class_1
geometry_msgs/Point position_1
std_msgs/Int32 id_2
std_msgs/Int8 class_2
geometry_msgs/Point position_2
std_msgs/Int32 id_3
std_msgs/Int8 class_3
geometry_msgs/Point position_3
std_msgs/Int32 id_4
std_msgs/Int8 class_4
geometry_msgs/Point position_4
std_msgs/Int32 id_5
std_msgs/Int8 class_5
geometry_msgs/Point position_5

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Int8
int8 data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','id_1','class_1','position_1','id_2','class_2','position_2','id_3','class_3','position_3','id_4','class_4','position_4','id_5','class_5','position_5']
  _slot_types = ['std_msgs/Header','std_msgs/Int32','std_msgs/Int8','geometry_msgs/Point','std_msgs/Int32','std_msgs/Int8','geometry_msgs/Point','std_msgs/Int32','std_msgs/Int8','geometry_msgs/Point','std_msgs/Int32','std_msgs/Int8','geometry_msgs/Point','std_msgs/Int32','std_msgs/Int8','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id_1,class_1,position_1,id_2,class_2,position_2,id_3,class_3,position_3,id_4,class_4,position_4,id_5,class_5,position_5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TargetCandidate, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id_1 is None:
        self.id_1 = std_msgs.msg.Int32()
      if self.class_1 is None:
        self.class_1 = std_msgs.msg.Int8()
      if self.position_1 is None:
        self.position_1 = geometry_msgs.msg.Point()
      if self.id_2 is None:
        self.id_2 = std_msgs.msg.Int32()
      if self.class_2 is None:
        self.class_2 = std_msgs.msg.Int8()
      if self.position_2 is None:
        self.position_2 = geometry_msgs.msg.Point()
      if self.id_3 is None:
        self.id_3 = std_msgs.msg.Int32()
      if self.class_3 is None:
        self.class_3 = std_msgs.msg.Int8()
      if self.position_3 is None:
        self.position_3 = geometry_msgs.msg.Point()
      if self.id_4 is None:
        self.id_4 = std_msgs.msg.Int32()
      if self.class_4 is None:
        self.class_4 = std_msgs.msg.Int8()
      if self.position_4 is None:
        self.position_4 = geometry_msgs.msg.Point()
      if self.id_5 is None:
        self.id_5 = std_msgs.msg.Int32()
      if self.class_5 is None:
        self.class_5 = std_msgs.msg.Int8()
      if self.position_5 is None:
        self.position_5 = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.id_1 = std_msgs.msg.Int32()
      self.class_1 = std_msgs.msg.Int8()
      self.position_1 = geometry_msgs.msg.Point()
      self.id_2 = std_msgs.msg.Int32()
      self.class_2 = std_msgs.msg.Int8()
      self.position_2 = geometry_msgs.msg.Point()
      self.id_3 = std_msgs.msg.Int32()
      self.class_3 = std_msgs.msg.Int8()
      self.position_3 = geometry_msgs.msg.Point()
      self.id_4 = std_msgs.msg.Int32()
      self.class_4 = std_msgs.msg.Int8()
      self.position_4 = geometry_msgs.msg.Point()
      self.id_5 = std_msgs.msg.Int32()
      self.class_5 = std_msgs.msg.Int8()
      self.position_5 = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ib3dib3dib3dib3dib3d().pack(_x.id_1.data, _x.class_1.data, _x.position_1.x, _x.position_1.y, _x.position_1.z, _x.id_2.data, _x.class_2.data, _x.position_2.x, _x.position_2.y, _x.position_2.z, _x.id_3.data, _x.class_3.data, _x.position_3.x, _x.position_3.y, _x.position_3.z, _x.id_4.data, _x.class_4.data, _x.position_4.x, _x.position_4.y, _x.position_4.z, _x.id_5.data, _x.class_5.data, _x.position_5.x, _x.position_5.y, _x.position_5.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id_1 is None:
        self.id_1 = std_msgs.msg.Int32()
      if self.class_1 is None:
        self.class_1 = std_msgs.msg.Int8()
      if self.position_1 is None:
        self.position_1 = geometry_msgs.msg.Point()
      if self.id_2 is None:
        self.id_2 = std_msgs.msg.Int32()
      if self.class_2 is None:
        self.class_2 = std_msgs.msg.Int8()
      if self.position_2 is None:
        self.position_2 = geometry_msgs.msg.Point()
      if self.id_3 is None:
        self.id_3 = std_msgs.msg.Int32()
      if self.class_3 is None:
        self.class_3 = std_msgs.msg.Int8()
      if self.position_3 is None:
        self.position_3 = geometry_msgs.msg.Point()
      if self.id_4 is None:
        self.id_4 = std_msgs.msg.Int32()
      if self.class_4 is None:
        self.class_4 = std_msgs.msg.Int8()
      if self.position_4 is None:
        self.position_4 = geometry_msgs.msg.Point()
      if self.id_5 is None:
        self.id_5 = std_msgs.msg.Int32()
      if self.class_5 is None:
        self.class_5 = std_msgs.msg.Int8()
      if self.position_5 is None:
        self.position_5 = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 145
      (_x.id_1.data, _x.class_1.data, _x.position_1.x, _x.position_1.y, _x.position_1.z, _x.id_2.data, _x.class_2.data, _x.position_2.x, _x.position_2.y, _x.position_2.z, _x.id_3.data, _x.class_3.data, _x.position_3.x, _x.position_3.y, _x.position_3.z, _x.id_4.data, _x.class_4.data, _x.position_4.x, _x.position_4.y, _x.position_4.z, _x.id_5.data, _x.class_5.data, _x.position_5.x, _x.position_5.y, _x.position_5.z,) = _get_struct_ib3dib3dib3dib3dib3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_ib3dib3dib3dib3dib3d().pack(_x.id_1.data, _x.class_1.data, _x.position_1.x, _x.position_1.y, _x.position_1.z, _x.id_2.data, _x.class_2.data, _x.position_2.x, _x.position_2.y, _x.position_2.z, _x.id_3.data, _x.class_3.data, _x.position_3.x, _x.position_3.y, _x.position_3.z, _x.id_4.data, _x.class_4.data, _x.position_4.x, _x.position_4.y, _x.position_4.z, _x.id_5.data, _x.class_5.data, _x.position_5.x, _x.position_5.y, _x.position_5.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id_1 is None:
        self.id_1 = std_msgs.msg.Int32()
      if self.class_1 is None:
        self.class_1 = std_msgs.msg.Int8()
      if self.position_1 is None:
        self.position_1 = geometry_msgs.msg.Point()
      if self.id_2 is None:
        self.id_2 = std_msgs.msg.Int32()
      if self.class_2 is None:
        self.class_2 = std_msgs.msg.Int8()
      if self.position_2 is None:
        self.position_2 = geometry_msgs.msg.Point()
      if self.id_3 is None:
        self.id_3 = std_msgs.msg.Int32()
      if self.class_3 is None:
        self.class_3 = std_msgs.msg.Int8()
      if self.position_3 is None:
        self.position_3 = geometry_msgs.msg.Point()
      if self.id_4 is None:
        self.id_4 = std_msgs.msg.Int32()
      if self.class_4 is None:
        self.class_4 = std_msgs.msg.Int8()
      if self.position_4 is None:
        self.position_4 = geometry_msgs.msg.Point()
      if self.id_5 is None:
        self.id_5 = std_msgs.msg.Int32()
      if self.class_5 is None:
        self.class_5 = std_msgs.msg.Int8()
      if self.position_5 is None:
        self.position_5 = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 145
      (_x.id_1.data, _x.class_1.data, _x.position_1.x, _x.position_1.y, _x.position_1.z, _x.id_2.data, _x.class_2.data, _x.position_2.x, _x.position_2.y, _x.position_2.z, _x.id_3.data, _x.class_3.data, _x.position_3.x, _x.position_3.y, _x.position_3.z, _x.id_4.data, _x.class_4.data, _x.position_4.x, _x.position_4.y, _x.position_4.z, _x.id_5.data, _x.class_5.data, _x.position_5.x, _x.position_5.y, _x.position_5.z,) = _get_struct_ib3dib3dib3dib3dib3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_ib3dib3dib3dib3dib3d = None
def _get_struct_ib3dib3dib3dib3dib3d():
    global _struct_ib3dib3dib3dib3dib3d
    if _struct_ib3dib3dib3dib3dib3d is None:
        _struct_ib3dib3dib3dib3dib3d = struct.Struct("<ib3dib3dib3dib3dib3d")
    return _struct_ib3dib3dib3dib3dib3d
